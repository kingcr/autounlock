#!/bin/sh

# Store our PID so that the clean-up script can kill this process if unlock occurs via the console and this process
# remains running in the background for any reason.
echo $$ > /run/.autounlock-pid

# -----------------------------------------------------------------------------------------------------------------
# Configurable globals
# -----------------------------------------------------------------------------------------------------------------

# Print debug messages
DEBUG=0
# Print verbose non-debug messages
VERBOSE=0
# The number of key providers (see get_fs_password procedure)
PROVIDER_SLOTS=4

# -----------------------------------------------------------------------------------------------------------------
# Internal globals
# -----------------------------------------------------------------------------------------------------------------

# The current filesystem password
FS_PASSWORD=
# TEMPLATE path for the filesystem key (actual keys should be postfixed with "-<filesystem>")
FSK_PATH=/.fs-key
# TEMPLATE path for ssh keys (actual keys should be postfixed with "-<slot>")
SSH_PATH=/.ssh-key
# Mountpoint for external devices
DEVICE_MOUNTPOINT=/run/.autounlock-mount

# -----------------------------------------------------------------------------------------------------------------
# debug_msg()
# Print a debug message if debugging is enabled.
# -----------------------------------------------------------------------------------------------------------------

debug_msg(){
   if [ $DEBUG -ne 0 ]; then
      echo "[DEBUG] $*"
   fi
}

# -----------------------------------------------------------------------------------------------------------------
# verbose_msg()
# Print a verbose non-debug message if verbose mode is enabled.
# -----------------------------------------------------------------------------------------------------------------

verbose_msg(){
   if [ $VERBOSE -ne 0 ]; then
      echo "$*"
   fi
}

# -----------------------------------------------------------------------------------------------------------------
# initialise()
# Program initialisation.
# -----------------------------------------------------------------------------------------------------------------

initialise(){
   debug_msg "ZFS autounlock initialising."
   # The zfs-initramfs boot script interacts with external processes via FIFO's; create the FIFO we will use
   # to notify it when we have completed unlocking.
   if [ ! -e /run/zfs_unlock_complete_notify ]; then
      mkfifo /run/zfs_unlock_complete_notify
   fi
   # Set up mountpoint
   if [ -d $DEVICE_MOUNTPOINT ]; then
      echo "ERROR: Mountpoint '$DEVICE_MOUNTPOINT' already exists, exiting!"
      exit 1
     else
      mkdir -p $DEVICE_MOUNTPOINT >/dev/null 2>&1
      if [ $? -ne 0 ]; then
         echo "ERROR: Failed to create mountpoint '$DEVICE_MOUNTPOINT', exiting!"
         exit 1
      fi
   fi
}

# -----------------------------------------------------------------------------------------------------------------
# wait_for_prompt()
# Wait for the /run/zfs_fs_name FIFO to appear, which indicates that the ZFS boot script has reached the point
# where it is waiting for the user to provide a password.
# -----------------------------------------------------------------------------------------------------------------

wait_for_prompt(){
   debug_msg "Waiting for first filesystem name to unlock."
   while [ ! -e /run/zfs_fs_name ]; do
      # It is possible that unlock occurs while we are waiting, if that happens then simply terminate.
      if [ -e /run/zfs_unlock_complete ]; then
         debug_msg "Unlock already completed, exiting."
         exit 0
      fi
      sleep 1
   done
}

# -----------------------------------------------------------------------------------------------------------------
# decrypt_fs_password()
# Decrypt the password for the given filesystem, using the given key.
# -----------------------------------------------------------------------------------------------------------------

decrypt_fs_password(){
   local fs_name=$1
   local remote_key=$2
   FS_PASSWORD=
   # Note the local key is named $FSK_PATH-$fs_name

   debug_msg "Decrypting '$FSK_PATH-$fs_name' using given key."
   if [ -z "$fs_name" ]; then
      debug_msg "Warning: No FS key path given, cannot decrypt."
      return
   fi
   if [ -z "$remote_key" ]; then
      debug_msg "Warning: No remote key given, cannot decrypt."
      return
   fi
   FS_PASSWORD=`/sbin/openssl enc -aes-256-cbc -pbkdf2 -d -in $FSK_PATH-$fs_name -pass pass:$remote_key 2>/dev/null`
   if [ $? -ne 0 ]; then
      FS_PASSWORD=
   fi
}

# -----------------------------------------------------------------------------------------------------------------
# get_fs_password_from_device
# Retrieve the password for a given filesystem using a key stored on a local device.
# -----------------------------------------------------------------------------------------------------------------

get_fs_password_from_device(){
   local fs_name=$1
   local uuid=$2
   local fs_type=$3
   FS_PASSWORD=
   debug_msg "Get remote key for FS '$fs_name' from device '$uuid', FS type '$fs_type'."
   if [ -z "$uuid" ]; then
      debug_msg "Warning: UUID not provided, cannot use this device."
      return
   fi
   if [ -z "$fs_type" ]; then
      debug_msg "Warning: FS type not provided, cannot use this device."
      return
   fi
   if [ -z "$fs_name" ]; then
      debug_msg "Warning: FS name not provided, cannot use this device."
      return
   fi
   # Find the device containing the given filesystem UUID
   local device_name=`blkid --uuid "$uuid"`
   if [ -z $device_name ]; then
      debug_msg "Device '$uuid' not found."
      return
   else
      # Mount the device at our mountpoint
      debug_msg "Device '$uuid' found, named '$device_name', mounting..."
      mount -t $fs_type $device_name $DEVICE_MOUNTPOINT
      if [ $? -ne 0 ]; then
         verbose_msg "ERROR: Failed to mount device '$device_name'."
         return
      fi
      # Check if the device contains the appropriately-named remote keyfile
      debug_msg "Looking for '.rkey-$fs_name' on device '$device_name'."
      if [ -f $DEVICE_MOUNTPOINT/.rkey-$fs_name ]; then
         # Get the keyfile contents
         local remote_key=`cat $DEVICE_MOUNTPOINT/.rkey-$fs_name`
         if [ $? -ne 0 ]; then
            verbose_msg "Warning: Failed to read remote key from device '$device_name'."
         else
            # decrypt the local key using the remote key, if possible
            decrypt_fs_password $fs_name $remote_key
            if [ ! -z $FS_PASSWORD ]; then
               verbose_msg "Found password for FS '$fs_name'."
            else
               verbose_msg "Warning: No password found for FS '$fs_name'."
            fi
         fi
      else
         verbose_msg "Warning: No matching key found on device '$device_name'."
      fi
      umount -f $DEVICE_MOUNTPOINT >/dev/null 2>&1
      if [ $? -ne 0 ]; then
         # Treat failure-to-unmount as terminal, because we cannot guarantee what happened here
         echo "ERROR: Failed to unmount device '$device_name', exiting!"
         exit 1
      fi
   fi
}

# -----------------------------------------------------------------------------------------------------------------
# get_fs_password_from_server()
# Retrieve the password for a given filesystem using the keyfile stored on a remote (ssh) server.
# -----------------------------------------------------------------------------------------------------------------

get_fs_password_from_server(){
   local fs_name=$1
   local credentials=$2
   local key_slot=$3
   FS_PASSWORD=
   debug_msg "Get remote key for FS '$fs_name' from server using credentials '$credentials', key slot '$key_slot'."
   if [ -z "$fs_name" ]; then
      debug_msg "Warning: FS name not provided, cannot use this server."
      return
   fi
   if [ -z "$credentials" ]; then
      debug_msg "Warning: Credentials not provided, cannot use this server."
      return
   fi
   if [ -z "$key_slot" ]; then
      debug_msg "Warning: Key slot not provided, cannot use this server."
      return
   fi
   if [ ! -f $SSH_PATH-$key_slot ]; then
      debug_msg "Warning: No key for slot '$key_slot', cannot use this server."
      return
   fi
   # The keyfile must be located in the user root of the remote server and appropriately-named. Just cat the content$   debug_msg "Connecting to server..."
   local remote_key=`/sbin/dropbearmulti dbclient -i $SSH_PATH-$key_slot -y $credentials "cat .rkey-$fs_name" 2>/dev$   if [ $? -ne 0 ]; then
      verbose_msg "Warning: Failed to read remote key from server '$credentials'."
   else
      if [ -z "$remote_key" ]; then
         debug_msg "Warning: No remote key located on server '$credentials'."
      else
         # decrypt the local key using the remote key, if possible
         decrypt_fs_password $fs_name $remote_key
         if [ ! -z $FS_PASSWORD ]; then
            verbose_msg "Found password for FS '$fs_name'."
         else
            verbose_msg "Warning: No password found for FS '$fs_name'."
         fi
      fi
  fi
}

# -----------------------------------------------------------------------------------------------------------------
# get_fs_password()
# Retrieve the password for a given filesystem using a given provider.
# -----------------------------------------------------------------------------------------------------------------

get_fs_password(){
   local fs_name=$1
   local provider_slot=$2
   debug_msg "Fetching password for FS '$fs_name' from provider slot '$provider_slot'."
   if [ -z "$fs_name" ]; then
      debug_msg "Warning: FS name not provided, cannot fetch password."
      return
   fi
   if [ -z "$provider_slot" ]; then
      debug_msg "Warning: Provier slot not provided, cannot fetch password."
      return
   fi
   # --------------------------------------------------------------------------------------------------------------
   # Add unlock mechanisms here, in order. Remember to ensure that PROVIDER_SLOTS count matches the number
   # of providers defined here.
   case $provider_slot in
      1)
         get_fs_password_from_device $fs_name <UUID> ext4
      ;;
      2)
         get_fs_password_from_server $fs_name user@host 1
      ;;
      *)
         FS_PASSWORD=
      ;;
   esac
   # --------------------------------------------------------------------------------------------------------------
}

# -----------------------------------------------------------------------------------------------------------------
# unlock_filesystems()
# Unlock the filesystems requested by the ZFS boot script, using the providers defined in this script.
# -----------------------------------------------------------------------------------------------------------------

unlock_filesystems(){
   debug_msg "Unlocking filesystems."
   local zfs_fs_name=""
   # The /run/zfs_unlock_complete file is used to indicate that ALL filesystems have been unlocked.
   while [ ! -e /run/zfs_unlock_complete ]; do
      # /run/zfs_fs_name contains the name of the filesystem the ZFS boot script is attempting to unlock.
      zfs_fs_name=$(cat /run/zfs_fs_name)
      zfs_console_askpwd_cmd=$(cat /run/zfs_console_askpwd_cmd)
      debug_msg "Fetching password for '$zfs_fs_name'"
      local provider_slot=1
      local slots_done=0
      while [ $slots_done -eq 0 ]; do
         # Get the password for the current filesystem, using the current provider
         get_fs_password $zfs_fs_name $provider_slot
         if [ ! -z "$FS_PASSWORD" ]; then
            # Attempt to unlock...
            echo $FS_PASSWORD | /sbin/zfs load-key "$zfs_fs_name" >/dev/null 2>&1
         else
            debug_msg "No password found for $zfs_fs_name."
         fi
         # Check whether the filesystem is in fact unlocked...
         if [ "$(/sbin/zfs get -H -ovalue keystatus "$zfs_fs_name" 2> /dev/null)" = "available" ]; then
            debug_msg "Password for $zfs_fs_name accepted."
            # Key found, no more providers necessary
            slots_done=1
            # Kill the ZFS console if running, because we have provided the key(s)
            zfs_console_askpwd_pid=$(ps | awk '!'"/awk/ && /$zfs_console_askpwd_cmd/ { print \$1; exit }")
            if [ -n "$zfs_console_askpwd_pid" ]; then
               debug_msg "Terminating ZFS console password prompt."
               kill "$zfs_console_askpwd_pid" >/dev/null 2>&1
            fi
            # Wait for another filesystem to unlock
            while [ "$(cat /run/zfs_fs_name)" = "$zfs_fs_name" ] && [ ! -e /run/zfs_unlock_complete ]; do
               debug_msg "Waiting for next filesystem to unlock."
               sleep 1
            done
         else
            # Static, visible warning: a provider meets all other criteria, but has the wrong key!
            if [ ! -z "$FS_PASSWORD" ]; then
               echo "WARNING: Incorrect password provided for $zfs_fs_name!"
            fi
            sleep 5
         fi
         # Move on to next provider
         provider_slot=$(($provider_slot+1))
         if [ $provider_slot -gt $PROVIDER_SLOTS ]; then
            slots_done=1
         fi
      done
   done
   # Done!
   debug_msg "All filesystems unlocked, setting completion flag."
   echo "ok" > /run/zfs_unlock_complete_notify
}

# -----------------------------------------------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------------------------------------------

initialise
wait_for_prompt
unlock_filesystems
if [ $DEBUG -ne 0 ]; then
   debug_msg "Sleeping for 10 seconds."
   sleep 10
fi





      
